Benjamin Parrish, cbe982
CS 2123-003
9/17/2019



Problem 1
	1    sum = 0;		//1 		
	2    i= 4;			//1 	
	3    while ( i> 3 && i< 10) {	//will run 7 times checking i =[4, 10]
	4		sum += A[i];		//4 and 5 run 6 times each because the wile loop cycles 6 times 
	5		i++;
	6    }
1+1+7+6+6 = 21

There are 21 instructions in this program.


Problem 2

I will refer to numElements as n in my answers.

1    sum = 0;		//1
2    for ( i=0; i< numElements;i++ ) { i will be initialized once; that step will not execute agian. i will be checked agianst num elements n+1 times.
//i will be increamented n times
3     	sum += A[ i];				//will execute n times
4    }								

The number of instructions, in terms of nunElements is:
1+1+n+1+n+n = 3n+3
It can be reduced to n.

Problem 3
1    sum = 0;			// 1
2    for ( i=0; i< n; i++ ) { 	//i will be initialized once. i will be checked against n n+1 times. i will be incremented n times. 
3       for (j=0; j < n; j++) {  //the loop will be run n times. For each, j will be initialized once, j will be checked against n n+1 times, and j will increament n times
4	    sum += i* j; 		//will run n times per loop for a total of n^2 times.
5	    }
6    } 

The number of of instructions, in terms of n is:
1 + 1 + n+1 + n +n(1 + n+1 +n + n) = 3+2n+ n(3n+2)=3+4n+3n^2
It can be reduced to n^2
